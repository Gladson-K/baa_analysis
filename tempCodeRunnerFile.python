import matplotlib.pyplot as plt
import matplotlib.patches as patches

# Function to visualize the rectangle arrangement
def visualize_rectangles(rectangles, container_width, container_height):
    fig, ax = plt.subplots()
    ax.set_xlim(0, container_width)
    ax.set_ylim(0, container_height)
    ax.set_aspect('equal')

    for i, (x, y, w, h) in enumerate(rectangles):
        rect = patches.Rectangle((x, y), w, h, linewidth=1, edgecolor='b', facecolor='none')
        ax.add_patch(rect)
        ax.text(x + w / 2, y + h / 2, f'R{i+1}({int(w)},{int(h)})', ha='center', va='center')

    plt.gca().invert_yaxis()
    plt.title(f'Minimum Area: {int(container_width)} x {int(container_height)} = {int(container_width) * int(container_height)} sq units')
    plt.show()




# Function to place rectangles to achieve the exact fit
def manual_placement(rectangles):
    placed_rects = []
    current_x, current_y, container_width = 0, 0, 0

    rectangles = sorted(rectangles, key=lambda r: -r[1])
    rows, row, row_width = [], [], 0

    for rect in rectangles:
        width, height = rect
        if row_width + width <= max([r[0] for r in rectangles]):
            row.append(rect)
            row_width += width
        else:
            rows.append(row)
            row, row_width = [rect], width
    if row:
        rows.append(row)

    for row in rows:
        row_width = sum([r[0] for r in row])
        row_height = max([r[1] for r in row])

        current_x = 0
        for width, height in row:
            placed_rects.append((current_x, current_y, width, height))
            current_x += width

        container_width = max(container_width, row_width)
        current_y += row_height

    container_height = current_y
    return placed_rects, container_width, container_height

# Main code to take input and visualize
def main():
    rectangles = []
    print("Enter width and height for 5 rectangles:")
    for i in range(5):
        width = float(input(f"Enter width of rectangle {i+1}: "))
        height = float(input(f"Enter height of rectangle {i+1}: "))
        rectangles.append((width, height))

    placed_rects, container_width, container_height = manual_placement(rectangles)
    print(f"The Minimum Possible Area is {int(container_width)} x {int(container_height)} = {int(container_width) * int(container_height)} square units.")
    visualize_rectangles(placed_rects, container_width, container_height)

if _name_ == "_main_":
    main()